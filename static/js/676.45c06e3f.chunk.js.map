{"version":3,"file":"static/js/676.45c06e3f.chunk.js","mappings":"6PAiBA,MAwCMA,EAAWA,KACf,MAAM,GAAEC,IAAOC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,GAAYC,EAAAA,EAAAA,SAAO,GACnBC,EAAOC,EAAAA,EAAUC,MAAKF,GAAQA,EAAKR,KAAOA,IAG1CW,EAAU,yBAEVC,EAAQ,GAAAC,OAAMF,EAAO,YAAAE,OAAWb,GAGtC,IAAIc,EAAW,GACXC,EAAmB,GACnBC,GAAU,IAAIC,MAAOC,cACzB,MAAMC,GAAY,IAAIF,MAAOG,UAG7B,GAAIZ,EAAM,CACRa,QAAQC,IAAI,0BAA2BtB,GACvCqB,QAAQC,IAAI,mBAAoBd,EAAKe,OAGrCT,EAAWN,EAAKe,MAGXf,EAAKe,MAAMC,WAAW,QAIzBH,QAAQC,IAAI,sBAAuBR,IAHnCA,EAAQ,GAAAD,OAAMF,GAAOE,OAAGL,EAAKe,OAC7BF,QAAQC,IAAI,iDAAkDR,IAOhE,IAAIW,EAAgBX,EAWpB,GAVIW,EAAcC,SAAS,OACzBD,EAAgBA,EAAcE,MAAM,KAAK,GACzCN,QAAQC,IAAI,kCAAgCG,IAI9CV,EAAmBU,EACnBJ,QAAQC,IAAI,qCAAsCP,GAGvC,MAAPf,EAAY,CAKd,GAHAe,EAAgB,GAAAF,OAAMF,EAAO,yBAGzBI,EAAiBa,SAAS,SAAU,CACtC,MAAMC,EAAad,EAAiBe,QAAQ,UAAW,QACvDf,EAAmBc,CACrB,CAEAR,QAAQC,IAAI,+BAAgCP,EAC9C,CAGA,IACEC,EAAUR,EAAKuB,KAAO,IAAId,KAAKT,EAAKuB,MAAMb,eAAgB,IAAID,MAAOC,aACvE,CAAE,MAAOc,GACPX,QAAQY,KAAK,iCAADpB,OAAkCb,EAAE,MAAAa,OAAKL,EAAKuB,OAC1Df,GAAU,IAAIC,MAAOC,aACvB,CACF,CA0KA,IAvKAgB,EAAAA,EAAAA,YAAU,KASR,GAPAb,QAAQC,IAAI,sBAAuBtB,GACnCqB,QAAQC,IAAI,YAAalB,EAAS+B,UAClCd,QAAQC,IAAI,cAAmB,OAAJd,QAAI,IAAJA,OAAI,EAAJA,EAAMe,OACjCF,QAAQC,IAAI,aAAcV,GAC1BS,QAAQC,IAAI,+BAA+B,kDAADT,OAAoDuB,mBAAmBxB,MAG5GJ,EAGH,OAFAa,QAAQgB,MAAM,uBAADxB,OAAwBb,SACrCE,EAAS,SAKX,GAAIY,EAAU,CACZ,MAAMwB,EAAe,IAAIC,MACzBD,EAAaE,IAAG,GAAA3B,OAAMC,EAAQ,OAAAD,OAAMM,GAEpCmB,EAAaG,OAAS,KAChBnC,EAAUoC,SACZrB,QAAQC,IAAI,mCAAoCR,EAClD,EAEFwB,EAAaK,QAAU,KACjBrC,EAAUoC,SACZrB,QAAQgB,MAAM,gCAAiCvB,EACjD,CAEJ,CAGyB,qBAAd8B,OAAOC,IAChBD,OAAOC,GAAGC,MAAMC,QAIdvC,IACFwC,SAASC,MAAK,GAAApC,OAAML,EAAKyC,MAAK,wDAIhC,MAAMC,EAAWF,SAASG,qBAAqB,QAC/C,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IACU,aAAzCF,EAASE,GAAGE,aAAa,aACzBJ,EAASE,GAAGE,aAAa,QAO/B,MAAO,KACLhD,EAAUoC,SAAU,CAAK,CAC1B,GACA,CAAClC,EAAMI,EAAUZ,EAAII,EAAUF,KAGlCgC,EAAAA,EAAAA,YAAU,KACR,IAAK1B,EAAM,OAqGX,MAlG4B+C,WAC1B,IAGE,MAAMC,EAAOR,SAASS,cAAc,QAG9BC,EAAgB,SAACC,EAAUC,GAA6B,IAApBC,EAAMC,UAAAT,OAAA,QAAAU,IAAAD,UAAA,IAAAA,UAAA,GAE9C,MAAME,EAAcH,EAChBb,SAASS,cAAc,cAAD5C,OAAe8C,EAAQ,OAC7CX,SAASS,cAAc,kBAAD5C,OAAmB8C,EAAQ,OAEjDK,GACFA,EAAYC,SAGd,MAAMC,EAAMlB,SAASmB,cAAc,QAC/BN,EACFK,EAAIE,aAAa,OAAQT,GAEzBO,EAAIE,aAAa,WAAYT,GAE/BO,EAAIE,aAAa,UAAWR,GAC5BJ,EAAKa,YAAYH,GACjB7C,QAAQC,IAAI,gCAADT,OAAiC8C,EAAQ,OAAA9C,OAAM+C,GAC5D,EAGAZ,SAASC,MAAK,GAAApC,OAAML,EAAKyC,MAAK,cAG9B,MAAMqB,EAAgBtB,SAASS,cAAc,yBAC7C,GAAIa,EACFA,EAAcC,KAAO3D,MAChB,CACL,MAAM4D,EAAOxB,SAASmB,cAAc,QACpCK,EAAKC,IAAM,YACXD,EAAKD,KAAO3D,EACZ4C,EAAKa,YAAYG,EACnB,CAGA,MAAME,EAAgB3D,EAAiBS,WAAW,QAC9CT,EAAgB,GAAAF,OACbF,GAAOE,OAAGE,GAGjB2C,EAAc,YAAa,oBAG3BA,EAAc,SAAU9C,GACxB8C,EAAc,UAAW,WACzBA,EAAc,WAAYlD,EAAKyC,OAC/BS,EAAc,iBAAkBlD,EAAKmE,aACrCjB,EAAc,WAAYgB,GAC1BhB,EAAc,sBAAuBgB,GACrChB,EAAc,iBAAkB,QAChCA,EAAc,kBAAmB,OACjCA,EAAc,eAAgBlD,EAAKyC,OACnCS,EAAc,eAAgB,WAG9BA,EAAc,eAAgB,uBAAuB,GACrDA,EAAc,gBAAiBlD,EAAKyC,OAAO,GAC3CS,EAAc,sBAAuBlD,EAAKmE,aAAa,GACvDjB,EAAc,gBAAiBgB,GAAe,GAG9C,MAAME,EAAM,IAAIrC,MAChBqC,EAAInC,OAAS,KACPnC,EAAUoC,SACZrB,QAAQC,IAAI,mCAAoCoD,EAClD,EAEFE,EAAIjC,QAAU,KACZ,GAAIrC,EAAUoC,UACZrB,QAAQgB,MAAM,gCAAiCqC,GAEpC,MAAP1E,GAAY,CACd,MAAM6E,EAAa,GAAAhE,OAAMF,EAAO,qBAChCU,QAAQC,IAAI,6BAA8BuD,GAC1CnB,EAAc,WAAYmB,GAC1BnB,EAAc,sBAAuBmB,GACrCnB,EAAc,gBAAiBmB,GAAe,EAChD,CACF,EAEFD,EAAIpC,IAAMkC,CAEZ,CAAE,MAAOrC,GACPhB,QAAQgB,MAAM,iCAAkCA,EAClD,GAIFyC,GAEO,MAEN,GACA,CAACtE,EAAMO,EAAkBH,EAAUZ,EAAIW,EAASG,EAAUK,KAGxDX,EACH,OAAO,KAWKA,EAAKyC,MACFzC,EAAKmE,YAmBtB,OACEI,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGzE,GACC0E,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAM,CAAAF,SAAA,EAELC,EAAAA,EAAAA,MAAA,SAAAD,SAAA,CAAQzE,EAAKyC,MAAM,iBAGnB8B,EAAAA,EAAAA,KAAA,QAAMN,IAAI,YAAYF,KAAM3D,KAG5BmE,EAAAA,EAAAA,KAAA,QAAMpB,SAAS,YAAYC,QAAQ,sBACnCmB,EAAAA,EAAAA,KAAA,QAAMpB,SAAS,SAASC,QAAShD,KACjCmE,EAAAA,EAAAA,KAAA,QAAMpB,SAAS,UAAUC,QAAQ,aACjCmB,EAAAA,EAAAA,KAAA,QAAMpB,SAAS,WAAWC,QAASpD,EAAKyC,SACxC8B,EAAAA,EAAAA,KAAA,QAAMpB,SAAS,iBAAiBC,QAASpD,EAAKmE,eAC9CI,EAAAA,EAAAA,KAAA,QAAMpB,SAAS,WAAWC,QAAS7C,KACnCgE,EAAAA,EAAAA,KAAA,QAAMpB,SAAS,sBAAsBC,QAAS7C,KAC9CgE,EAAAA,EAAAA,KAAA,QAAMpB,SAAS,iBAAiBC,QAAQ,UACxCmB,EAAAA,EAAAA,KAAA,QAAMpB,SAAS,kBAAkBC,QAAQ,SACzCmB,EAAAA,EAAAA,KAAA,QAAMpB,SAAS,eAAeC,QAASpD,EAAKyC,SAC5C8B,EAAAA,EAAAA,KAAA,QAAMpB,SAAS,eAAeC,QAAQ,aAGtCmB,EAAAA,EAAAA,KAAA,QAAMK,KAAK,eAAexB,QAAQ,yBAClCmB,EAAAA,EAAAA,KAAA,QAAMK,KAAK,gBAAgBxB,QAASpD,EAAKyC,SACzC8B,EAAAA,EAAAA,KAAA,QAAMK,KAAK,sBAAsBxB,QAASpD,EAAKmE,eAC/CI,EAAAA,EAAAA,KAAA,QAAMK,KAAK,gBAAgBxB,QAAS7C,QAGtCgE,EAAAA,EAAAA,KAACM,EAAAA,EAAG,CAACC,GAAI,CACPC,QAAS,UACTC,UAAW,QACXC,GAAI,CAAEC,GAAI,EAAGC,GAAI,QACjBC,GAAI,GACJX,UACAF,EAAAA,EAAAA,KAACc,EAAAA,EAAS,CAACC,SAAS,KAAKR,GAAI,CAAES,GAAI,CAAEL,GAAI,EAAGC,GAAI,EAAGK,GAAI,IAAMf,UAE3DC,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAACC,GAAI,CACPW,SAAU,SACVC,GAAI,EACJX,QAAS,QAETY,aAAc,CAAET,GAAI,EAAGC,GAAI,OAC3BS,UAAW,CAAEV,GAAI,OAAQC,GAAI,gCAC7BV,SAAA,EACAF,EAAAA,EAAAA,KAACsB,EAAAA,EAAS,CACRC,UAAU,MACVhB,GAAI,CACFiB,MAAO,OACPC,OAAQ,CAAEd,GAAI,QAASC,GAAI,QAASK,GAAI,QAASS,GAAI,SACrDC,UAAW,QACXC,eAAgB,UAElBpF,MAAK,GAAAV,OAAKC,EAAQ,OAAAD,OAAMM,GACxByF,IAAKpG,EAAKyC,MACV4D,QAAQ,UAEV3B,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAACC,GAAI,CACPwB,EAAG,CAAEpB,GAAI,EAAGC,GAAI,EAAGK,GAAI,GACvBF,SAAU,OACViB,GAAI,QACJ9B,SAAA,EACAF,EAAAA,EAAAA,KAACiC,EAAAA,EAAU,CACTC,QAAQ,KACRX,UAAU,KACVhB,GAAI,CACFY,GAAI,EACJgB,MAAO,UACPC,WAAY,OACZC,SAAU,CAAE1B,GAAI,SAAUC,GAAI,OAAQK,GAAI,SAAUS,GAAI,QACxDY,WAAY,CAAE3B,GAAI,IAAKM,GAAI,MAC3Bf,SAEDzE,EAAKyC,SAER8B,EAAAA,EAAAA,KAACiC,EAAAA,EAAU,CACTC,QAAQ,YACRC,MAAM,iBACN5B,GAAI,CACFY,GAAI,EACJkB,SAAU,CAAE1B,GAAI,WAAYC,GAAI,OAAQK,GAAI,UAC5CsB,UAAW,UACXrC,SAEDzE,EAAKuB,QAGRmD,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAACC,GAAI,CAAEiC,QAAS,OAAQC,WAAY,SAAUtB,GAAI,GAAIjB,SAAA,EACxDF,EAAAA,EAAAA,KAACsB,EAAAA,EAAS,CACRC,UAAU,MACV/E,MAAOf,EAAKiH,aAAe,mBAC3Bb,IAAI,cACJtB,GAAI,CACFiB,MAAO,GACPC,OAAQ,GACRL,aAAc,MACdO,UAAW,QACXN,UAAW,6BACXsB,GAAI,MAGR3C,EAAAA,EAAAA,KAACiC,EAAAA,EAAU,CAACC,QAAQ,YAAYC,MAAM,eAAe5B,GAAI,CAAE6B,WAAY,KAAMlC,SAAC,wBAIhFF,EAAAA,EAAAA,KAACiC,EAAAA,EAAU,CACTC,QAAQ,QACRX,UAAU,MACVhB,GAAI,CACF4B,MAAO,OACPG,WAAY,IACZD,SAAU,CAAE1B,GAAI,OAAQC,GAAI,UAAWK,GAAI,UAE3C2B,UAAW,aACX,QAAS,CACP7B,SAAU,OACVU,OAAQ,OACRe,QAAS,QACTK,OAAQ,YACRzB,aAAc,MACdC,UAAW,8BAEb,OAAQ,CACNgB,SAAU,CAAE1B,GAAI,SAAUC,GAAI,SAAUK,GAAI,UAC5CmB,WAAY,IACZU,GAAI,EACJ3B,GAAI,EACJgB,MAAO,WAET,OAAQ,CACNE,SAAU,CAAE1B,GAAI,SAAUC,GAAI,SAAUK,GAAI,UAC5CmB,WAAY,IACZU,GAAI,EACJ3B,GAAI,EACJgB,MAAO,WAET,MAAO,CACLhB,GAAI,IACJ4B,cAAe,WAEjB,aAAc,CACZC,GAAI,CAAErC,GAAI,EAAGC,GAAI,GACjBO,GAAI,IACJ8B,GAAI,CAAEtC,GAAI,EAAGC,GAAI,IAEnB,OAAQ,CACNO,GAAI,GAEN,MAAO,CACLgB,MAAO,UACPe,eAAgB,OAChBN,UAAW,aACX,UAAW,CACTM,eAAgB,cAGpB,eAAgB,CACdC,WAAY,iBACZC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJnB,MAAO,OACPI,UAAW,UAEb,gBAAiB,CACfgB,UAAW,OACXxC,SAAU,OACVyC,QAAS,CAAE7C,GAAI,EAAGC,GAAI,GACtBQ,aAAc,MACdqC,gBAAiB,UACjBpB,SAAU,CAAE1B,GAAI,UAAWC,GAAI,YAGnC8C,wBAAyB,CAAEC,OAAQlI,EAAKoD,YAG1CsB,EAAAA,EAAAA,MAACG,EAAAA,EAAG,CAACC,GAAI,CACPuC,GAAI,EACJf,EAAG,CAAEpB,GAAI,EAAGM,GAAI,GAChBT,QAAS,CAAEG,GAAI,cAAeC,GAAI,WAClCQ,aAAc,CAAET,GAAI,EAAGC,GAAI,GAC3BS,UAAW,CAAEV,GAAI,OAAQC,GAAI,+BAC7BgD,UAAW,UACX1D,SAAA,EACAF,EAAAA,EAAAA,KAACiC,EAAAA,EAAU,CACTC,QAAQ,KACR3B,GAAI,CACFY,GAAI,EACJiB,WAAY,OACZD,MAAO,OACPE,SAAU,CAAE1B,GAAI,SAAUM,GAAI,YAC9Bf,SACH,0DAGDC,EAAAA,EAAAA,MAAC0D,EAAAA,EAAK,CACJC,UAAU,MACVC,QAAS,CAAEpD,GAAI,EAAGC,GAAI,GACtBoD,eAAe,SAAQ9D,SAAA,EAEvBF,EAAAA,EAAAA,KAAA,OAAKiE,QAASA,IAhgBRC,EAACC,EAAKjG,EAAO0B,EAAa7D,KAOpD,GANAO,QAAQC,IAAI,oCAAqC4H,GACjD7H,QAAQC,IAAI,aAAW2B,GACvB5B,QAAQC,IAAI,kBAAgBqD,GAC5BtD,QAAQC,IAAI,UAAWR,GAGnB8B,OAAOC,GACT,IACExB,QAAQC,IAAI,yCAEZsB,OAAOC,GAAGsG,GAAG,CACXC,OAAQ,QACR7E,KAAM2E,EACNG,MAAM,GAADxI,OAAKoC,EAAK,OAAApC,OAAM8D,KACpB,SAAS2E,GACNA,IAAaA,EAASC,cACxBlI,QAAQC,IAAI,sCAEZD,QAAQgB,MAAM,kCAA2C,OAARiH,QAAQ,IAARA,OAAQ,EAARA,EAAUC,eAE3DC,IAEJ,GACF,CAAE,MAAOnH,GACPhB,QAAQgB,MAAM,uBAAwBA,GACtCmH,GACF,MAEAnI,QAAQC,IAAI,oDACZkI,IAIF,SAASA,IACP,MAAMC,EAAU,gDAAA5I,OAAmDuB,mBAAmB8G,GAAI,WAAArI,OAAUuB,mBAAmBa,EAAQ,MAAQ0B,IACvI/B,OAAO8G,KAAKD,EAAY,SAAU,uBACpC,GA2dwCR,CAAoBrI,EAAUJ,EAAKyC,MAAOzC,EAAKmE,YAAa5D,GAAmB4I,MAAO,CAAEC,OAAQ,WAAY3E,UAC9HF,EAAAA,EAAAA,KAAC8E,EAAAA,GAAY,CAACC,KAAM,GAAIC,OAAK,OAE/BhF,EAAAA,EAAAA,KAACiF,EAAAA,EAAkB,CACjBd,IAAKtI,EACLqC,MAAOzC,EAAKyC,MACZgH,IAAI,UACJC,SAAU,CAAC,oBAAkB,gBAAiB,iBAC9CvF,YAAanE,EAAKmE,YAAYM,UAE9BF,EAAAA,EAAAA,KAACoF,EAAAA,GAAW,CAACL,KAAM,GAAIC,OAAK,OAE9BhF,EAAAA,EAAAA,KAACqF,EAAAA,GAAmB,CAClBlB,IAAKtI,EACLqC,MAAOzC,EAAKyC,MACZoH,QAAS7J,EAAKmE,YACd2F,OAAO,UACP3F,YAAanE,EAAKmE,YAAYM,UAE9BF,EAAAA,EAAAA,KAACwF,EAAAA,GAAY,CAACT,KAAM,GAAIC,OAAK,OAE/BhF,EAAAA,EAAAA,KAACyF,EAAAA,GAAmB,CAClBtB,IAAKtI,EACLqC,MAAK,GAAApC,OAAKL,EAAKyC,MAAK,OAAApC,OAAML,EAAKmE,aAC/B8F,UAAU,IAAGxF,UAEbF,EAAAA,EAAAA,KAAC2F,EAAAA,GAAY,CAACZ,KAAM,GAAIC,OAAK,uBAU1CY,KAoCD,MACH,EAKP5K,EAAS6K,YAAc,WAEvB,S","sources":["pages/BlogPost.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { Container, Typography, Box, CardMedia, Stack, Link } from '@mui/material';\nimport { blogPosts } from '../data/blogData';\nimport { Helmet } from 'react-helmet-async';\nimport {\n  FacebookShareButton,\n  LinkedinShareButton,\n  TwitterShareButton,\n  WhatsappShareButton,\n  FacebookIcon,\n  LinkedinIcon,\n  TwitterIcon,\n  WhatsappIcon\n} from 'react-share';\n\n// Función personalizada para compartir en Facebook con refresco de caché\nconst customFacebookShare = (url, title, description, imageUrl) => {\n  console.log('Compartiendo en Facebook con URL:', url);\n  console.log('Título:', title);\n  console.log('Descripción:', description);\n  console.log('Imagen:', imageUrl);\n  \n  // Método moderno utilizando la API de Facebook si está disponible\n  if (window.FB) {\n    try {\n      console.log('Usando FB.ui para compartir contenido');\n      \n      window.FB.ui({\n        method: 'share',\n        href: url,\n        quote: `${title} - ${description}`,\n      }, function(response) {\n        if (response && !response.error_message) {\n          console.log('Contenido compartido exitosamente');\n        } else {\n          console.error('Error al compartir en Facebook:', response?.error_message);\n          // Si falla, usar el método básico como fallback\n          fallbackShare();\n        }\n      });\n    } catch (error) {\n      console.error('Error al usar FB.ui:', error);\n      fallbackShare();\n    }\n  } else {\n    console.log('FB SDK no disponible, usando método básico');\n    fallbackShare();\n  }\n  \n  // Método básico como fallback\n  function fallbackShare() {\n    const fbShareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}&quote=${encodeURIComponent(title + ' - ' + description)}`;\n    window.open(fbShareUrl, '_blank', 'width=626,height=436');\n  }\n};\n\nconst BlogPost = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  // Add a reference to track if component is mounted\n  const isMounted = useRef(true);\n  const post = blogPosts.find(post => post.id === id);\n  \n  // Asegurarnos de que las URLs sean absolutas y accesibles\n  const baseUrl = 'https://adasoft.com.ar';\n  // Usar el formato con hash para que funcione con GitHub Pages y HashRouter\n  const shareUrl = `${baseUrl}/#/blog/${id}`;\n  \n  // Preparar las variables de imagen SOLO si el post existe\n  let imageUrl = '';\n  let absoluteImageUrl = '';\n  let isoDate = new Date().toISOString();\n  const timestamp = new Date().getTime();\n  \n  // Preparar datos solo si el post existe\n  if (post) {\n    console.log('Procesando post con ID:', id);\n    console.log('Imagen del post:', post.image);\n    \n    // Aseguramos que la URL de la imagen sea absoluta\n    imageUrl = post.image;\n    \n    // Si la URL no comienza con http, construimos la URL absoluta\n    if (!post.image.startsWith('http')) {\n      imageUrl = `${baseUrl}${post.image}`;\n      console.log('URL relativa detectada, convertida a absoluta:', imageUrl);\n    } else {\n      console.log('URL ya es absoluta:', imageUrl);\n    }\n    \n    // Para la URL absoluta usada en meta tags, eliminamos cualquier parámetro existente\n    // que podría estar causando problemas con las redes sociales\n    let cleanImageUrl = imageUrl;\n    if (cleanImageUrl.includes('?')) {\n      cleanImageUrl = cleanImageUrl.split('?')[0];\n      console.log('Limpiando URL de parámetros:', cleanImageUrl);\n    }\n    \n    // Asegurarnos de que la URL absoluta sea correcta para redes sociales\n    absoluteImageUrl = cleanImageUrl; // Sin cache buster para meta tags\n    console.log('URL absoluta final para meta tags:', absoluteImageUrl);\n    \n    // Manejo especial para el post id:4 - Reemplazar webp con jpg para mejor compatibilidad con redes sociales\n    if (id === '4') {\n      // Para el post 4, usar la imagen específica jpg en lugar de webp\n      absoluteImageUrl = `${baseUrl}/images/gmail-ai.webp`;\n      \n      // Facebook prefiere jpg para thumbnails, así que convertimos si es necesario\n      if (absoluteImageUrl.endsWith('.webp')) {\n        const jpgVersion = absoluteImageUrl.replace(/\\.webp$/, '.jpg');\n        absoluteImageUrl = jpgVersion;\n      }\n      \n      console.log('Imagen especial para post 4:', absoluteImageUrl);\n    }\n    \n    // Crear fecha en formato ISO para Schema.org\n    try {\n      isoDate = post.date ? new Date(post.date).toISOString() : new Date().toISOString();\n    } catch (e) {\n      console.warn(`Could not parse date for post ${id}: ${post.date}`);\n      isoDate = new Date().toISOString();\n    }\n  }\n  \n  // IMPORTANTE: Todos los hooks deben ser usados antes de cualquier return condicional\n  useEffect(() => {\n    // Debug para ayudar en el diagnóstico\n    console.log('Cargando blog post:', id);\n    console.log('Location:', location.pathname);\n    console.log('Post image:', post?.image);\n    console.log('Share URL:', shareUrl);\n    console.log('Refresh Facebook cache with:', `https://developers.facebook.com/tools/debug/?q=${encodeURIComponent(shareUrl)}`);\n    \n    // Si no se encuentra el post, redirigir al blog\n    if (!post) {\n      console.error(`Post no encontrado: ${id}`);\n      navigate('/blog');\n      return;\n    }\n\n    // Precargar la imagen solo si tenemos un post válido\n    if (imageUrl) {\n      const preloadImage = new Image();\n      preloadImage.src = `${imageUrl}?v=${timestamp}`;\n      // Use isMounted ref to avoid state updates on unmounted component\n      preloadImage.onload = () => {\n        if (isMounted.current) {\n          console.log('Imagen precargada correctamente:', imageUrl);\n        }\n      };\n      preloadImage.onerror = () => {\n        if (isMounted.current) {\n          console.error('Error al precargar la imagen:', imageUrl);\n        }\n      };\n    }\n\n    // Actualizar Facebook si está disponible (esto ayuda con FBXML)\n    if (typeof window.FB !== 'undefined') {\n      window.FB.XFBML.parse();\n    }\n    \n    // Configurar el título del documento\n    if (post) {\n      document.title = `${post.title} | ADASOFT - Desarrollo de Software y Diseño Web`;\n    }\n    \n    // Forzar refresco de meta tags para redes sociales\n    const metaTags = document.getElementsByTagName('meta');\n    for (let i = 0; i < metaTags.length; i++) {\n      if (metaTags[i].getAttribute('property') === 'og:image' || \n          metaTags[i].getAttribute('name') === 'twitter:image') {\n        // No hacemos nada aquí porque ahora usamos optimizedImageUrl en las etiquetas meta\n        // que ya incluye el timestamp\n      }\n    }\n    \n    // Cleanup function to prevent memory leaks and async operations after unmount\n    return () => {\n      isMounted.current = false;\n    };\n  }, [post, shareUrl, id, location, navigate]);\n\n  // Efecto adicional para forzar la actualización de metatags específicamente para redes sociales\n  useEffect(() => {\n    if (!post) return;\n    \n    // Este efecto se ejecuta solo una vez cuando se carga el componente\n    const forceMetaTagsUpdate = async () => {\n      try {\n        // Crear tags directamente en la cabecera HTML principal (no solo en React-Helmet)\n        // para asegurar que los crawlers de redes sociales los detecten inmediatamente\n        const head = document.querySelector('head');\n        \n        // Función para crear o actualizar meta tags\n        const updateMetaTag = (property, content, isName = false) => {\n          // Primero eliminar si ya existe\n          const existingTag = isName \n            ? document.querySelector(`meta[name=\"${property}\"]`)\n            : document.querySelector(`meta[property=\"${property}\"]`);\n            \n          if (existingTag) {\n            existingTag.remove();\n          }\n          \n          const tag = document.createElement('meta');\n          if (isName) {\n            tag.setAttribute('name', property);\n          } else {\n            tag.setAttribute('property', property);\n          }\n          tag.setAttribute('content', content);\n          head.appendChild(tag);\n          console.log(`Meta tag creado/actualizado: ${property} = ${content}`);\n        };\n        \n        // Actualizar title directamente (esto ayuda con los crawlers de FB)\n        document.title = `${post.title} | ADASOFT`;\n        \n        // Crear/actualizar un link canónico para la URL\n        const canonicalLink = document.querySelector('link[rel=\"canonical\"]');\n        if (canonicalLink) {\n          canonicalLink.href = shareUrl;\n        } else {\n          const link = document.createElement('link');\n          link.rel = 'canonical';\n          link.href = shareUrl;\n          head.appendChild(link);\n        }\n        \n        // Asegurarse de que la url de la imagen sea absoluta\n        const finalImageUrl = absoluteImageUrl.startsWith('http') \n          ? absoluteImageUrl \n          : `${baseUrl}${absoluteImageUrl}`;\n        \n        // Meta tag obligatorio para Facebook\n        updateMetaTag('fb:app_id', '2375482829489229');\n        \n        // Metadatos para Facebook/Open Graph\n        updateMetaTag('og:url', shareUrl);\n        updateMetaTag('og:type', 'article');\n        updateMetaTag('og:title', post.title);\n        updateMetaTag('og:description', post.description);\n        updateMetaTag('og:image', finalImageUrl);\n        updateMetaTag('og:image:secure_url', finalImageUrl);\n        updateMetaTag('og:image:width', '1200');\n        updateMetaTag('og:image:height', '630');\n        updateMetaTag('og:image:alt', post.title);\n        updateMetaTag('og:site_name', 'ADASOFT');\n        \n        // Metadatos para Twitter\n        updateMetaTag('twitter:card', 'summary_large_image', true);\n        updateMetaTag('twitter:title', post.title, true);\n        updateMetaTag('twitter:description', post.description, true);\n        updateMetaTag('twitter:image', finalImageUrl, true);\n        \n        // Realizar una precarga de la imagen para asegurar que está en caché\n        const img = new Image();\n        img.onload = () => {\n          if (isMounted.current) {\n            console.log('Imagen precargada correctamente:', finalImageUrl);\n          }\n        };\n        img.onerror = () => {\n          if (isMounted.current) {\n            console.error('Error al precargar la imagen:', finalImageUrl);\n            // Intentar con una imagen de respaldo si es necesario\n            if (id === '4') {\n              const fallbackImage = `${baseUrl}/images/gmail.jpg`;\n              console.log('Usando imagen de respaldo:', fallbackImage);\n              updateMetaTag('og:image', fallbackImage);\n              updateMetaTag('og:image:secure_url', fallbackImage);\n              updateMetaTag('twitter:image', fallbackImage, true);\n            }\n          }\n        };\n        img.src = finalImageUrl;\n        \n      } catch (error) {\n        console.error('Error al actualizar meta tags:', error);\n      }\n    };\n    \n    // Ejecutar actualización de meta tags\n    forceMetaTagsUpdate();\n    \n    return () => {\n      // Cleanup for this effect\n    };\n  }, [post, absoluteImageUrl, shareUrl, id, baseUrl, imageUrl, timestamp]);\n  \n  // Si no hay post, no renderizamos nada (el efecto se encargará de redirigir)\n  if (!post) {\n    return null;\n  }\n  \n  // Preparar Schema.org JSON-LD para el artículo\n  const schemaOrgArticle = {\n    '@context': 'https://schema.org',\n    '@type': 'BlogPosting',\n    'mainEntityOfPage': {\n      '@type': 'WebPage',\n      '@id': shareUrl\n    },\n    'headline': post.title,\n    'description': post.description,\n    'image': absoluteImageUrl,\n    'author': {\n      '@type': 'Organization',\n      'name': 'ADASOFT',\n      'url': 'https://adasoft.com.ar'\n    },\n    'publisher': {\n      '@type': 'Organization',\n      'name': 'ADASOFT',\n      'logo': {\n        '@type': 'ImageObject',\n        'url': 'https://adasoft.com.ar/images/logotrans2.png'\n      }\n    },\n    'datePublished': isoDate,\n    'dateModified': isoDate\n  };\n\n  return (\n    <>\n      {post ? (\n        <>\n          <Helmet>\n            {/* Título básico del documento */}\n            <title>{post.title} | ADASOFT</title>\n            \n            {/* Link canónico para la URL */}\n            <link rel=\"canonical\" href={shareUrl} />\n            \n            {/* Metadatos para Facebook/Open Graph */}\n            <meta property=\"fb:app_id\" content=\"2375482829489229\" />\n            <meta property=\"og:url\" content={shareUrl} />\n            <meta property=\"og:type\" content=\"article\" />\n            <meta property=\"og:title\" content={post.title} />\n            <meta property=\"og:description\" content={post.description} />\n            <meta property=\"og:image\" content={absoluteImageUrl} />\n            <meta property=\"og:image:secure_url\" content={absoluteImageUrl} />\n            <meta property=\"og:image:width\" content=\"1200\" />\n            <meta property=\"og:image:height\" content=\"630\" />\n            <meta property=\"og:image:alt\" content={post.title} />\n            <meta property=\"og:site_name\" content=\"ADASOFT\" />\n            \n            {/* Metadatos para Twitter */}\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            <meta name=\"twitter:title\" content={post.title} />\n            <meta name=\"twitter:description\" content={post.description} />\n            <meta name=\"twitter:image\" content={absoluteImageUrl} />\n          </Helmet>\n\n          <Box sx={{ \n            bgcolor: '#f8f9fa', \n            minHeight: '100vh',\n            pt: { xs: 0, sm: '72px' }, \n            pb: 8\n          }}>\n            <Container maxWidth=\"lg\" sx={{ px: { xs: 0, sm: 2, md: 3 } }}>\n              {/* Box styling with conditional rendering for mobile devices */}\n              <Box sx={{ \n                overflow: 'hidden', \n                mb: 4, \n                bgcolor: 'white',\n                // Remove borders and shadows on mobile\n                borderRadius: { xs: 0, sm: '8px' },\n                boxShadow: { xs: 'none', sm: '0 4px 20px rgba(0,0,0,0.06)' }\n              }}>\n                <CardMedia\n                  component=\"img\"\n                  sx={{ \n                    width: '100%', \n                    height: { xs: '220px', sm: '300px', md: '400px', lg: '500px' }, \n                    objectFit: 'cover',\n                    objectPosition: 'center'\n                  }}\n                  image={`${imageUrl}?v=${timestamp}`}\n                  alt={post.title}\n                  loading=\"lazy\" // Add lazy loading to reduce initial layout shifts\n                />\n                <Box sx={{ \n                  p: { xs: 3, sm: 4, md: 5 },\n                  maxWidth: '100%',\n                  mx: 'auto'\n                }}>\n                  <Typography \n                    variant=\"h3\" \n                    component=\"h1\" \n                    sx={{ \n                      mb: 2, \n                      color: '#1a1a2e', \n                      fontWeight: 'bold', \n                      fontSize: { xs: '1.5rem', sm: '2rem', md: '2.5rem', lg: '3rem' },\n                      lineHeight: { xs: 1.3, md: 1.2 }\n                    }}\n                  >\n                    {post.title}\n                  </Typography>\n                  <Typography \n                    variant=\"subtitle1\" \n                    color=\"text.secondary\" \n                    sx={{ \n                      mb: 4, \n                      fontSize: { xs: '0.875rem', sm: '1rem', md: '1.1rem' },\n                      fontStyle: 'italic'\n                    }}\n                  >\n                    {post.date}\n                  </Typography>\n                  {/* Autor del post - siempre mostrar \"por Ana Sanchez\" */}\n                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 4 }}>\n                    <CardMedia\n                      component=\"img\"\n                      image={post.authorImage || '/images/Ana.jpeg'}\n                      alt=\"Ana Sanchez\"\n                      sx={{\n                        width: 48,\n                        height: 48,\n                        borderRadius: '50%',\n                        objectFit: 'cover',\n                        boxShadow: '0 2px 8px rgba(0,0,0,0.10)',\n                        mr: 2\n                      }}\n                    />\n                    <Typography variant=\"subtitle2\" color=\"text.primary\" sx={{ fontWeight: 500 }}>\n                      por Ana Sanchez\n                    </Typography>\n                  </Box>\n                  <Typography \n                    variant=\"body1\" \n                    component=\"div\" \n                    sx={{ \n                      color: '#333', \n                      lineHeight: 1.8,\n                      fontSize: { xs: '1rem', sm: '1.05rem', md: '1.1rem' },\n                      // Improve content readability on mobile\n                      wordBreak: 'break-word',\n                      '& img': {\n                        maxWidth: '100%',\n                        height: 'auto',\n                        display: 'block',\n                        margin: '2rem auto',\n                        borderRadius: '8px',\n                        boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\n                      },\n                      '& h3': {\n                        fontSize: { xs: '1.3rem', sm: '1.6rem', md: '1.8rem' },\n                        fontWeight: 600,\n                        mt: 4,\n                        mb: 2,\n                        color: '#1a1a2e'\n                      },\n                      '& h4': {\n                        fontSize: { xs: '1.1rem', sm: '1.3rem', md: '1.5rem' },\n                        fontWeight: 600,\n                        mt: 3,\n                        mb: 2,\n                        color: '#1a1a2e'\n                      },\n                      '& p': {\n                        mb: 2.5,\n                        letterSpacing: '0.015em'\n                      },\n                      '& ul, & ol': {\n                        ml: { xs: 2, sm: 3 },\n                        mb: 2.5,\n                        pr: { xs: 1, sm: 0 }\n                      },\n                      '& li': {\n                        mb: 1\n                      },\n                      '& a': {\n                        color: '#0066cc',\n                        textDecoration: 'none',\n                        wordBreak: 'break-word',\n                        '&:hover': {\n                          textDecoration: 'underline'\n                        }\n                      },\n                      '& blockquote': {\n                        borderLeft: '4px solid #ddd',\n                        pl: 2,\n                        py: 1,\n                        my: 2,\n                        color: '#555',\n                        fontStyle: 'italic'\n                      },\n                      '& pre, & code': {\n                        overflowX: 'auto',\n                        maxWidth: '100%',\n                        padding: { xs: 1, sm: 2 },\n                        borderRadius: '4px',\n                        backgroundColor: '#f5f5f5',\n                        fontSize: { xs: '0.85rem', sm: '0.9rem' }\n                      }\n                    }} \n                    dangerouslySetInnerHTML={{ __html: post.content }} \n                  />\n                  \n                  <Box sx={{ \n                    mt: 6, \n                    p: { xs: 2, md: 4 }, \n                    bgcolor: { xs: 'transparent', sm: '#f8f9fa' }, \n                    borderRadius: { xs: 0, sm: 2 },\n                    boxShadow: { xs: 'none', sm: '0 2px 12px rgba(0,0,0,0.05)' },\n                    textAlign: 'center'\n                  }}>\n                    <Typography \n                      variant=\"h6\" \n                      sx={{ \n                        mb: 3, \n                        fontWeight: 'bold', \n                        color: '#333',\n                        fontSize: { xs: '1.1rem', md: '1.25rem' }\n                      }}\n                    >\n                      ¿Te gustó este artículo? ¡Compártelo!\n                    </Typography>\n                    <Stack \n                      direction=\"row\" \n                      spacing={{ xs: 1, sm: 2 }} \n                      justifyContent=\"center\"\n                    >\n                      <div onClick={() => customFacebookShare(shareUrl, post.title, post.description, absoluteImageUrl)} style={{ cursor: 'pointer' }}>\n                        <FacebookIcon size={40} round />\n                      </div>\n                      <TwitterShareButton \n                        url={shareUrl} \n                        title={post.title}\n                        via=\"adasoft\"\n                        hashtags={[\"Automatización\", \"Productividad\", \"Tecnología\"]}\n                        description={post.description}\n                      >\n                        <TwitterIcon size={40} round />\n                      </TwitterShareButton>\n                      <LinkedinShareButton \n                        url={shareUrl} \n                        title={post.title} \n                        summary={post.description} \n                        source=\"ADASOFT\"\n                        description={post.description}\n                      >\n                        <LinkedinIcon size={40} round />\n                      </LinkedinShareButton>\n                      <WhatsappShareButton \n                        url={shareUrl} \n                        title={`${post.title} - ${post.description}`} \n                        separator=\" \" \n                      >\n                        <WhatsappIcon size={40} round />\n                      </WhatsappShareButton>\n                    </Stack>\n                  </Box>\n                </Box>\n              </Box>\n            </Container>\n          </Box>\n\n          {/* Debug panel for admin - hidden in production */}\n          {process.env.NODE_ENV === 'development' && (\n            <Box sx={{ mt: 4, p: 2, bgcolor: '#f5f5f5', borderRadius: 2, mx: 'auto', maxWidth: 'md' }}>\n              <Typography variant=\"h6\" gutterBottom>Debug Info (solo visible en desarrollo)</Typography>\n              <Typography variant=\"body2\">ID del post: {id}</Typography>\n              <Typography variant=\"body2\">URL para compartir: {shareUrl}</Typography>\n              <Typography variant=\"body2\">URL de la imagen original: {imageUrl}</Typography>\n              <Typography variant=\"body2\">URL absoluta de la imagen: {absoluteImageUrl}</Typography>\n              <Box sx={{ mt: 2 }}>\n                <Typography variant=\"body2\" gutterBottom>Para forzar la actualización del caché de Facebook:</Typography>\n                <Link\n                  href={`https://developers.facebook.com/tools/debug/?q=${encodeURIComponent(shareUrl)}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  sx={{ wordBreak: 'break-all' }}\n                >\n                  Abrir Depurador de Facebook\n                </Link>\n              </Box>\n              <Box sx={{ mt: 2 }}>\n                <Typography variant=\"body2\" gutterBottom>Para forzar la actualización del caché de Twitter:</Typography>\n                <Link\n                  href={`https://cards-dev.twitter.com/validator?url=${encodeURIComponent(shareUrl)}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  sx={{ wordBreak: 'break-all' }}\n                >\n                  Abrir Validador de Twitter Cards\n                </Link>\n              </Box>\n              <Box sx={{ mt: 2 }}>\n                <Typography variant=\"body2\" gutterBottom>Botón de depuración para forzar actualización de caché de Facebook:</Typography>\n                <button onClick={() => console.log('Forzar actualización de caché de Facebook')}>Forzar actualización de caché de Facebook</button>\n              </Box>\n            </Box>\n          )}\n        </>\n      ) : null}\n    </>\n  );\n};\n\n// Set displayName for better debugging\nBlogPost.displayName = 'BlogPost';\n\nexport default BlogPost;"],"names":["BlogPost","id","useParams","navigate","useNavigate","location","useLocation","isMounted","useRef","post","blogPosts","find","baseUrl","shareUrl","concat","imageUrl","absoluteImageUrl","isoDate","Date","toISOString","timestamp","getTime","console","log","image","startsWith","cleanImageUrl","includes","split","endsWith","jpgVersion","replace","date","e","warn","useEffect","pathname","encodeURIComponent","error","preloadImage","Image","src","onload","current","onerror","window","FB","XFBML","parse","document","title","metaTags","getElementsByTagName","i","length","getAttribute","async","head","querySelector","updateMetaTag","property","content","isName","arguments","undefined","existingTag","remove","tag","createElement","setAttribute","appendChild","canonicalLink","href","link","rel","finalImageUrl","description","img","fallbackImage","forceMetaTagsUpdate","_jsx","_Fragment","children","_jsxs","Helmet","name","Box","sx","bgcolor","minHeight","pt","xs","sm","pb","Container","maxWidth","px","md","overflow","mb","borderRadius","boxShadow","CardMedia","component","width","height","lg","objectFit","objectPosition","alt","loading","p","mx","Typography","variant","color","fontWeight","fontSize","lineHeight","fontStyle","display","alignItems","authorImage","mr","wordBreak","margin","mt","letterSpacing","ml","pr","textDecoration","borderLeft","pl","py","my","overflowX","padding","backgroundColor","dangerouslySetInnerHTML","__html","textAlign","Stack","direction","spacing","justifyContent","onClick","customFacebookShare","url","ui","method","quote","response","error_message","fallbackShare","fbShareUrl","open","style","cursor","FacebookIcon","size","round","TwitterShareButton","via","hashtags","TwitterIcon","LinkedinShareButton","summary","source","LinkedinIcon","WhatsappShareButton","separator","WhatsappIcon","process","displayName"],"sourceRoot":""}